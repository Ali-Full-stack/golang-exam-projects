services:
  api:
    build: ./gateway
    container_name: api_gateway
    ports:
      - 9000:9000
    depends_on:
      - booking_service
      - hotel_service
      - user_service
    networks:
      - mynetwork

  user_service:
    build: ./user-service
    container_name: user_service_container
    image: user_service_image
    environment:
      - PG_URL=postgres://postgres:3115@user_postgres:5432/users?sslmode=disable
    ports:
      - 9001:9001
    depends_on:
      user_postgres:
        condition: service_healthy
      broker:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - mynetwork

  hotel_service:
    build: ./hotel-service
    container_name: hotel_service_container
    image: hotel_service_image
    environment:
      - PG_URL=postgres://postgres:3115@hotel_postgres:5432/hotels?sslmode=disable
    ports:
      - 9002:9002
    depends_on:
      user_postgres:
        condition: service_healthy
      broker:
        condition: service_started
    networks:
      - mynetwork

  booking_service:
    build: ./booking-service
    container_name: booking_service_container
    environment:
      - MONGO_URL=mongodb://booking_mongo:27017/bookings
    ports:
      - 9003:9003
    depends_on:
      - booking_mongo
      - broker
    networks:
      - mynetwork

  notification_service:
    build: ./notification-service
    container_name: notification_service_container
    image: notification_service_image
    ports:
      - "9004:9004"
      - "50051:50051"
    depends_on:
      - broker
    networks:
      - mynetwork

  broker:
    image: apache/kafka:latest
    container_name: kafka_broker
    ports:
      - "9092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    networks:
      - mynetwork

  user_postgres:
    image: postgres:14-alpine
    container_name: user_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 3115
      POSTGRES_DB: users
      PGDATA: /var/lib/postgresql/data
    volumes:
      - user-db-data:/var/lib/postgresql/data
      - ./user_service/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5435:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d users || exit 1"]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s
    networks:
      - mynetwork

  migrate_user:
    image: migrate/migrate
    volumes:
      - ./user-service/migrations:/migrations
    command: ["-path", "/migrations", "-database", "postgres://postgres:3115@user_postgres:5432/users?sslmode=disable", "up"]
    depends_on:
      user_postgres:
        condition: service_healthy
    networks:
      - mynetwork

  hotel_postgres:
    image: postgres:14-alpine
    container_name: hotel_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 3115
      POSTGRES_DB: hotels
      PGDATA: /var/lib/postgresql/data
    volumes:
      - hotel-db-data:/var/lib/postgresql/data
      - ./hotel_service/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d hotels || exit 1"]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s
    networks:
      - mynetwork

  migrate_hotel:
    image: migrate/migrate
    volumes:
      - ./hotel-service/migrations:/migrations
    command: ["-path", "/migrations", "-database", "postgres://postgres:3115@hotel_postgres:5432/hotels?sslmode=disable", "up"]
    depends_on:
      hotel_postgres:
        condition: service_healthy
    networks:
      - mynetwork

  booking_mongo:
    image: mongo:latest
    container_name: booking_mongo
    environment:
      MONGO_INITDB_DATABASE: Bookings
    ports:
      - "27019:27017"
    volumes:
      - booking-db-data:/data/db
    networks:
      - mynetwork

  redis:
    container_name: redis_container
    image: redis:latest
    ports:
      - "6378:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep -q PONG || exit 1"]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge

volumes:
  user-db-data:
  hotel-db-data:
  booking-db-data: