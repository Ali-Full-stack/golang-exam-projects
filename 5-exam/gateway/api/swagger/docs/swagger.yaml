definitions:
  booking.BookingInfo:
    properties:
      checkInDate:
        type: string
      checkOutDate:
        type: string
      hotel_id:
        type: string
      roomType:
        type: string
      totalAmount:
        type: number
      totalDays:
        type: integer
      user_id:
        type: string
    type: object
  booking.BookingResponse:
    properties:
      booking_id:
        type: string
      checkInDate:
        type: string
      checkOutDate:
        type: string
      hotel_id:
        type: string
      roomType:
        type: string
      status:
        type: string
      totalAmount:
        type: number
      totalDays:
        type: integer
      user_id:
        type: string
    type: object
  booking.Response:
    properties:
      message:
        type: string
    type: object
  hotel.Address:
    properties:
      City:
        type: string
      Region:
        type: string
      street:
        type: string
    type: object
  hotel.CountResponse:
    properties:
      count:
        type: integer
      status:
        type: string
      type:
        type: string
    type: object
  hotel.HotelID:
    properties:
      id:
        type: string
    type: object
  hotel.HotelInfo:
    properties:
      Address:
        $ref: '#/definitions/hotel.Address'
      name:
        type: string
      rating:
        type: number
    type: object
  hotel.HotelResponse:
    properties:
      message:
        type: string
    type: object
  hotel.HotelWithRoom:
    properties:
      address:
        $ref: '#/definitions/hotel.Address'
      name:
        type: string
      rating:
        type: number
      rooms:
        items:
          $ref: '#/definitions/hotel.Room'
        type: array
    type: object
  hotel.Room:
    properties:
      PricePerNight:
        type: number
      totalRooms:
        type: integer
      type:
        type: string
    type: object
  hotel.RoomInfo:
    properties:
      hote_id:
        type: string
      rooms:
        items:
          $ref: '#/definitions/hotel.Room'
        type: array
    type: object
  hotel.RoomResponse:
    properties:
      count:
        type: integer
      pricePerNight:
        type: number
      type:
        type: string
    type: object
  model.Room:
    properties:
      price_per_night:
        type: number
      total_rooms:
        type: integer
      type:
        type: string
    type: object
  model.UserInfo:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  model.UserLogin:
    properties:
      id:
        type: string
      password:
        type: string
    type: object
  user.UserID:
    properties:
      id:
        type: string
    type: object
  user.UserResponse:
    properties:
      message:
        type: string
    type: object
  user.UserToken:
    properties:
      expiryInMin:
        type: integer
      token:
        type: string
    type: object
  user.UserWithID:
    properties:
      email:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  description: This swagger UI was created to manage hotel bookings
  title: 'Project: Hotel Booking API'
  version: "1.0"
paths:
  /api/bookings:
    post:
      consumes:
      - application/json
      description: This method used  to create new  booking
      parameters:
      - description: User Token
        in: header
        name: token
        required: true
        type: string
      - description: Booking Details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/booking.BookingInfo'
      produces:
      - application/json
      responses:
        "201":
          description: Booking  Confirmation
          schema:
            $ref: '#/definitions/booking.BookingResponse'
        "400":
          description: Unable to read booking  details !
          schema: {}
        "403":
          description: Unauthorized access
          schema: {}
        "500":
          description: Unable to get response
          schema: {}
      security:
      - BearerAuth: []
      summary: Creates New Booking
      tags:
      - BOOKINGS
  /api/bookings/{id}:
    delete:
      consumes:
      - application/json
      description: This method used  to delete   booking detail
      parameters:
      - description: User Token
        in: header
        name: token
        required: true
        type: string
      - description: Booking ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Deleted Succesfully
          schema:
            $ref: '#/definitions/booking.Response'
        "403":
          description: Unauthorized access
          schema: {}
        "500":
          description: Unable to get response
          schema: {}
      security:
      - BearerAuth: []
      summary: Deletes  Booking Details
      tags:
      - BOOKINGS
    get:
      consumes:
      - application/json
      description: This method used  to get   booking detail
      parameters:
      - description: User Token
        in: header
        name: token
        required: true
        type: string
      - description: Booking ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Deleted Succesfully
          schema:
            $ref: '#/definitions/booking.Response'
        "403":
          description: Unauthorized access
          schema: {}
        "500":
          description: Unable to get response
          schema: {}
      security:
      - BearerAuth: []
      summary: gets  Booking Details By ID
      tags:
      - BOOKINGS
  /api/hotels:
    get:
      consumes:
      - application/json
      description: This method used  to get  all hotel's Information
      parameters:
      - description: User Token
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Hotel Updated Succesfully
          schema:
            items:
              $ref: '#/definitions/hotel.HotelInfo'
            type: array
        "403":
          description: Unauthorized access
          schema: {}
        "500":
          description: Unable to get response
          schema: {}
      security:
      - BearerAuth: []
      summary: Gets  All Hotel's  Information
      tags:
      - HOTELS
    post:
      consumes:
      - application/json
      description: This method used  to create  new  hotel
      parameters:
      - description: User Token
        in: header
        name: token
        required: true
        type: string
      - description: Hotel  Details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/hotel.HotelInfo'
      produces:
      - application/json
      responses:
        "201":
          description: Hotel  ID
          schema:
            $ref: '#/definitions/hotel.HotelID'
        "400":
          description: Unable to read Hotel information !
          schema: {}
        "403":
          description: Unauthorized access
          schema: {}
        "500":
          description: Unable to get response
          schema: {}
      security:
      - BearerAuth: []
      summary: Creates New Hotel
      tags:
      - HOTELS
  /api/hotels/{id}:
    delete:
      consumes:
      - application/json
      description: This method used  to delete  hotel  information
      parameters:
      - description: User Token
        in: header
        name: token
        required: true
        type: string
      - description: Hotel ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Hotel Deleted Succesfully
          schema:
            $ref: '#/definitions/hotel.HotelResponse'
        "403":
          description: Unauthorized access
          schema: {}
        "500":
          description: Unable to get response
          schema: {}
      security:
      - BearerAuth: []
      summary: Deletes  Hotel  Information
      tags:
      - HOTELS
    get:
      consumes:
      - application/json
      description: This method used  to get   hotel's Information by id
      parameters:
      - description: User Token
        in: header
        name: token
        required: true
        type: string
      - description: Hotel ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Hotel Details
          schema:
            $ref: '#/definitions/hotel.HotelWithRoom'
        "403":
          description: Unauthorized access
          schema: {}
        "500":
          description: Unable to get response
          schema: {}
      security:
      - BearerAuth: []
      summary: Gets   Hotel's  Information By ID
      tags:
      - HOTELS
    put:
      consumes:
      - application/json
      description: This method used  to update  hotel's Information
      parameters:
      - description: User Token
        in: header
        name: token
        required: true
        type: string
      - description: Hotel ID
        in: path
        name: id
        required: true
        type: string
      - description: Hotel  Details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/hotel.HotelInfo'
      produces:
      - application/json
      responses:
        "201":
          description: Hotel Updated Succesfully
          schema:
            $ref: '#/definitions/hotel.HotelResponse'
        "400":
          description: Unable to read Hotel  information !
          schema: {}
        "403":
          description: Unauthorized access
          schema: {}
        "500":
          description: Unable to get response
          schema: {}
      security:
      - BearerAuth: []
      summary: Updates  Hotel  Information
      tags:
      - HOTELS
  /api/hotels/{id}/rooms:
    delete:
      consumes:
      - application/json
      description: This method used  to Delete  hotel's room
      parameters:
      - description: User Token
        in: header
        name: token
        required: true
        type: string
      - description: Hotel ID
        in: path
        name: id
        required: true
        type: string
      - description: Room  Details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.Room'
      produces:
      - application/json
      responses:
        "201":
          description: Room Deleted Succesfully
          schema:
            $ref: '#/definitions/hotel.HotelResponse'
        "400":
          description: Invalid Room type !
          schema: {}
        "403":
          description: Unauthorized access
          schema: {}
        "500":
          description: Unable to get response
          schema: {}
      security:
      - BearerAuth: []
      summary: Deletes  Hotel's Room
      tags:
      - ROOMS
    patch:
      consumes:
      - application/json
      description: This method used  to updates   hotel's   rooms count
      parameters:
      - description: User Token
        in: header
        name: token
        required: true
        type: string
      - description: Hotel ID
        in: path
        name: id
        required: true
        type: string
      - description: Room  Details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.Room'
      produces:
      - application/json
      responses:
        "201":
          description: Room Details
          schema:
            $ref: '#/definitions/hotel.CountResponse'
        "400":
          description: Invalid Room type !
          schema: {}
        "403":
          description: Unauthorized access
          schema: {}
        "500":
          description: Unable to get response
          schema: {}
      security:
      - BearerAuth: []
      summary: Updates  Hotel's  Rooms Count
      tags:
      - ROOMS
    post:
      consumes:
      - application/json
      description: This method used  to create  hotel's room
      parameters:
      - description: User Token
        in: header
        name: token
        required: true
        type: string
      - description: Hotel ID
        in: path
        name: id
        required: true
        type: string
      - description: Room  Details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/hotel.RoomInfo'
      produces:
      - application/json
      responses:
        "201":
          description: Room Created Succesfully
          schema:
            $ref: '#/definitions/hotel.HotelResponse'
        "400":
          description: Unable to read room  information !
          schema: {}
        "403":
          description: Unauthorized access
          schema: {}
        "500":
          description: Unable to get response
          schema: {}
      security:
      - BearerAuth: []
      summary: Creates  Hotel's Room
      tags:
      - ROOMS
    put:
      consumes:
      - application/json
      description: This method used  to update  hotel's room
      parameters:
      - description: User Token
        in: header
        name: token
        required: true
        type: string
      - description: Hotel ID
        in: path
        name: id
        required: true
        type: string
      - description: Room  Details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/hotel.RoomInfo'
      produces:
      - application/json
      responses:
        "201":
          description: Room Updated Succesfully
          schema:
            $ref: '#/definitions/hotel.HotelResponse'
        "400":
          description: Unable to read hotel's room  information !
          schema: {}
        "403":
          description: Unauthorized access
          schema: {}
        "500":
          description: Unable to get response
          schema: {}
      security:
      - BearerAuth: []
      summary: Updates  Hotel's Room
      tags:
      - ROOMS
  /api/hotels/{id}/rooms/availability:
    post:
      consumes:
      - application/json
      description: This method used  to check   hotel's available  rooms
      parameters:
      - description: User Token
        in: header
        name: token
        required: true
        type: string
      - description: Hotel ID
        in: path
        name: id
        required: true
        type: string
      - description: Room  Details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.Room'
      produces:
      - application/json
      responses:
        "201":
          description: Room Details
          schema:
            $ref: '#/definitions/hotel.RoomResponse'
        "400":
          description: Invalid Room type !
          schema: {}
        "403":
          description: Unauthorized access
          schema: {}
        "500":
          description: Unable to get response
          schema: {}
      security:
      - BearerAuth: []
      summary: Checks  Hotel's Available Rooms
      tags:
      - ROOMS
  /api/users:
    get:
      consumes:
      - application/json
      description: This method used  to get all users
      parameters:
      - description: User Token
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: User Information
          schema:
            items:
              $ref: '#/definitions/user.UserWithID'
            type: array
        "403":
          description: Unauthorized access
          schema: {}
        "500":
          description: Unable to get response
          schema: {}
      security:
      - BearerAuth: []
      summary: Get All Users
      tags:
      - USERS
  /api/users/{id}:
    delete:
      consumes:
      - application/json
      description: This method used  to Delete users information
      parameters:
      - description: User Token
        in: header
        name: token
        required: true
        type: string
      - description: User  ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Response
          schema:
            $ref: '#/definitions/user.UserResponse'
        "403":
          description: Unauthorized access
          schema: {}
        "500":
          description: Unable to get response
          schema: {}
      security:
      - BearerAuth: []
      summary: Delete User Information
      tags:
      - USERS
    get:
      consumes:
      - application/json
      description: This method used  to Get User By ID
      parameters:
      - description: User Token
        in: header
        name: token
        required: true
        type: string
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: User ID
          schema:
            $ref: '#/definitions/user.UserWithID'
        "403":
          description: Unauthorized access
          schema: {}
        "500":
          description: Unable to get response
          schema: {}
      security:
      - BearerAuth: []
      summary: Get User By ID
      tags:
      - USERS
    put:
      consumes:
      - application/json
      description: This method used  to update users information
      parameters:
      - description: User Token
        in: header
        name: token
        required: true
        type: string
      - description: User  ID
        in: path
        name: id
        required: true
        type: string
      - description: User Information
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.UserInfo'
      produces:
      - application/json
      responses:
        "201":
          description: Response
          schema:
            $ref: '#/definitions/user.UserResponse'
        "400":
          description: Invalid Request Body
          schema: {}
        "403":
          description: Unauthorized access
          schema: {}
        "500":
          description: Unable to get response
          schema: {}
      security:
      - BearerAuth: []
      summary: Update User Information
      tags:
      - USERS
  /api/users/login:
    post:
      consumes:
      - application/json
      description: This method used  for users to login
      parameters:
      - description: User login
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.UserLogin'
      produces:
      - application/json
      responses:
        "201":
          description: User Token
          schema:
            $ref: '#/definitions/user.UserToken'
        "400":
          description: Invalid Request Body
          schema: {}
        "403":
          description: Unauthorized access
          schema: {}
        "500":
          description: Unable to get response
          schema: {}
      security:
      - BearerAuth: []
      summary: User Login
      tags:
      - USERS
  /api/users/register:
    post:
      consumes:
      - application/json
      description: This method used  to register new  users
      parameters:
      - description: User Information
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.UserInfo'
      produces:
      - application/json
      responses:
        "201":
          description: User ID
          schema:
            $ref: '#/definitions/user.UserID'
        "400":
          description: Invalid Request Body
          schema: {}
        "403":
          description: Unauthorized access
          schema: {}
        "500":
          description: Unable to get response
          schema: {}
      security:
      - BearerAuth: []
      summary: Registers New User
      tags:
      - USERS
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
