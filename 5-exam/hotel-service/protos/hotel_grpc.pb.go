// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HotelServiceClient is the client API for HotelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HotelServiceClient interface {
	CreateHotel(ctx context.Context, in *HotelInfo, opts ...grpc.CallOption) (*HotelID, error)
	CreateHotelRoom(ctx context.Context, in *RoomInfo, opts ...grpc.CallOption) (*HotelResponse, error)
	UpdateHotel(ctx context.Context, in *HotelInfo, opts ...grpc.CallOption) (*HotelResponse, error)
	UpdateHotelRoom(ctx context.Context, in *RoomInfo, opts ...grpc.CallOption) (*HotelResponse, error)
	DeleteHotel(ctx context.Context, in *HotelID, opts ...grpc.CallOption) (*HotelResponse, error)
	DeleteHotelRoom(ctx context.Context, in *RoomType, opts ...grpc.CallOption) (*HotelResponse, error)
	GetAllHotels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (HotelService_GetAllHotelsClient, error)
	GetHotelById(ctx context.Context, in *HotelID, opts ...grpc.CallOption) (*HotelWithRoom, error)
	CheckAvailableRooms(ctx context.Context, in *RoomCount, opts ...grpc.CallOption) (*RoomResponse, error)
	UpdateRoomCount(ctx context.Context, in *RoomCount, opts ...grpc.CallOption) (*CountResponse, error)
}

type hotelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHotelServiceClient(cc grpc.ClientConnInterface) HotelServiceClient {
	return &hotelServiceClient{cc}
}

func (c *hotelServiceClient) CreateHotel(ctx context.Context, in *HotelInfo, opts ...grpc.CallOption) (*HotelID, error) {
	out := new(HotelID)
	err := c.cc.Invoke(ctx, "/HotelService/CreateHotel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) CreateHotelRoom(ctx context.Context, in *RoomInfo, opts ...grpc.CallOption) (*HotelResponse, error) {
	out := new(HotelResponse)
	err := c.cc.Invoke(ctx, "/HotelService/CreateHotelRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) UpdateHotel(ctx context.Context, in *HotelInfo, opts ...grpc.CallOption) (*HotelResponse, error) {
	out := new(HotelResponse)
	err := c.cc.Invoke(ctx, "/HotelService/UpdateHotel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) UpdateHotelRoom(ctx context.Context, in *RoomInfo, opts ...grpc.CallOption) (*HotelResponse, error) {
	out := new(HotelResponse)
	err := c.cc.Invoke(ctx, "/HotelService/UpdateHotelRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) DeleteHotel(ctx context.Context, in *HotelID, opts ...grpc.CallOption) (*HotelResponse, error) {
	out := new(HotelResponse)
	err := c.cc.Invoke(ctx, "/HotelService/DeleteHotel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) DeleteHotelRoom(ctx context.Context, in *RoomType, opts ...grpc.CallOption) (*HotelResponse, error) {
	out := new(HotelResponse)
	err := c.cc.Invoke(ctx, "/HotelService/DeleteHotelRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) GetAllHotels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (HotelService_GetAllHotelsClient, error) {
	stream, err := c.cc.NewStream(ctx, &HotelService_ServiceDesc.Streams[0], "/HotelService/GetAllHotels", opts...)
	if err != nil {
		return nil, err
	}
	x := &hotelServiceGetAllHotelsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HotelService_GetAllHotelsClient interface {
	Recv() (*HotelInfo, error)
	grpc.ClientStream
}

type hotelServiceGetAllHotelsClient struct {
	grpc.ClientStream
}

func (x *hotelServiceGetAllHotelsClient) Recv() (*HotelInfo, error) {
	m := new(HotelInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hotelServiceClient) GetHotelById(ctx context.Context, in *HotelID, opts ...grpc.CallOption) (*HotelWithRoom, error) {
	out := new(HotelWithRoom)
	err := c.cc.Invoke(ctx, "/HotelService/GetHotelById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) CheckAvailableRooms(ctx context.Context, in *RoomCount, opts ...grpc.CallOption) (*RoomResponse, error) {
	out := new(RoomResponse)
	err := c.cc.Invoke(ctx, "/HotelService/CheckAvailableRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) UpdateRoomCount(ctx context.Context, in *RoomCount, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/HotelService/UpdateRoomCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotelServiceServer is the server API for HotelService service.
// All implementations must embed UnimplementedHotelServiceServer
// for forward compatibility
type HotelServiceServer interface {
	CreateHotel(context.Context, *HotelInfo) (*HotelID, error)
	CreateHotelRoom(context.Context, *RoomInfo) (*HotelResponse, error)
	UpdateHotel(context.Context, *HotelInfo) (*HotelResponse, error)
	UpdateHotelRoom(context.Context, *RoomInfo) (*HotelResponse, error)
	DeleteHotel(context.Context, *HotelID) (*HotelResponse, error)
	DeleteHotelRoom(context.Context, *RoomType) (*HotelResponse, error)
	GetAllHotels(*Empty, HotelService_GetAllHotelsServer) error
	GetHotelById(context.Context, *HotelID) (*HotelWithRoom, error)
	CheckAvailableRooms(context.Context, *RoomCount) (*RoomResponse, error)
	UpdateRoomCount(context.Context, *RoomCount) (*CountResponse, error)
	mustEmbedUnimplementedHotelServiceServer()
}

// UnimplementedHotelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHotelServiceServer struct {
}

func (UnimplementedHotelServiceServer) CreateHotel(context.Context, *HotelInfo) (*HotelID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHotel not implemented")
}
func (UnimplementedHotelServiceServer) CreateHotelRoom(context.Context, *RoomInfo) (*HotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHotelRoom not implemented")
}
func (UnimplementedHotelServiceServer) UpdateHotel(context.Context, *HotelInfo) (*HotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHotel not implemented")
}
func (UnimplementedHotelServiceServer) UpdateHotelRoom(context.Context, *RoomInfo) (*HotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHotelRoom not implemented")
}
func (UnimplementedHotelServiceServer) DeleteHotel(context.Context, *HotelID) (*HotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHotel not implemented")
}
func (UnimplementedHotelServiceServer) DeleteHotelRoom(context.Context, *RoomType) (*HotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHotelRoom not implemented")
}
func (UnimplementedHotelServiceServer) GetAllHotels(*Empty, HotelService_GetAllHotelsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllHotels not implemented")
}
func (UnimplementedHotelServiceServer) GetHotelById(context.Context, *HotelID) (*HotelWithRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotelById not implemented")
}
func (UnimplementedHotelServiceServer) CheckAvailableRooms(context.Context, *RoomCount) (*RoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAvailableRooms not implemented")
}
func (UnimplementedHotelServiceServer) UpdateRoomCount(context.Context, *RoomCount) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoomCount not implemented")
}
func (UnimplementedHotelServiceServer) mustEmbedUnimplementedHotelServiceServer() {}

// UnsafeHotelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HotelServiceServer will
// result in compilation errors.
type UnsafeHotelServiceServer interface {
	mustEmbedUnimplementedHotelServiceServer()
}

func RegisterHotelServiceServer(s grpc.ServiceRegistrar, srv HotelServiceServer) {
	s.RegisterService(&HotelService_ServiceDesc, srv)
}

func _HotelService_CreateHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HotelInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).CreateHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HotelService/CreateHotel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).CreateHotel(ctx, req.(*HotelInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_CreateHotelRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).CreateHotelRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HotelService/CreateHotelRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).CreateHotelRoom(ctx, req.(*RoomInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_UpdateHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HotelInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).UpdateHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HotelService/UpdateHotel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).UpdateHotel(ctx, req.(*HotelInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_UpdateHotelRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).UpdateHotelRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HotelService/UpdateHotelRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).UpdateHotelRoom(ctx, req.(*RoomInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_DeleteHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HotelID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).DeleteHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HotelService/DeleteHotel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).DeleteHotel(ctx, req.(*HotelID))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_DeleteHotelRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).DeleteHotelRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HotelService/DeleteHotelRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).DeleteHotelRoom(ctx, req.(*RoomType))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_GetAllHotels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HotelServiceServer).GetAllHotels(m, &hotelServiceGetAllHotelsServer{stream})
}

type HotelService_GetAllHotelsServer interface {
	Send(*HotelInfo) error
	grpc.ServerStream
}

type hotelServiceGetAllHotelsServer struct {
	grpc.ServerStream
}

func (x *hotelServiceGetAllHotelsServer) Send(m *HotelInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _HotelService_GetHotelById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HotelID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).GetHotelById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HotelService/GetHotelById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).GetHotelById(ctx, req.(*HotelID))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_CheckAvailableRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).CheckAvailableRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HotelService/CheckAvailableRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).CheckAvailableRooms(ctx, req.(*RoomCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_UpdateRoomCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).UpdateRoomCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HotelService/UpdateRoomCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).UpdateRoomCount(ctx, req.(*RoomCount))
	}
	return interceptor(ctx, in, info, handler)
}

// HotelService_ServiceDesc is the grpc.ServiceDesc for HotelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HotelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HotelService",
	HandlerType: (*HotelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHotel",
			Handler:    _HotelService_CreateHotel_Handler,
		},
		{
			MethodName: "CreateHotelRoom",
			Handler:    _HotelService_CreateHotelRoom_Handler,
		},
		{
			MethodName: "UpdateHotel",
			Handler:    _HotelService_UpdateHotel_Handler,
		},
		{
			MethodName: "UpdateHotelRoom",
			Handler:    _HotelService_UpdateHotelRoom_Handler,
		},
		{
			MethodName: "DeleteHotel",
			Handler:    _HotelService_DeleteHotel_Handler,
		},
		{
			MethodName: "DeleteHotelRoom",
			Handler:    _HotelService_DeleteHotelRoom_Handler,
		},
		{
			MethodName: "GetHotelById",
			Handler:    _HotelService_GetHotelById_Handler,
		},
		{
			MethodName: "CheckAvailableRooms",
			Handler:    _HotelService_CheckAvailableRooms_Handler,
		},
		{
			MethodName: "UpdateRoomCount",
			Handler:    _HotelService_UpdateRoomCount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllHotels",
			Handler:       _HotelService_GetAllHotels_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/hotel.proto",
}
